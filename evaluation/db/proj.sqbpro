<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="/home/alexander/Documents/Projects/git-new/Minizinc/minibrass/evaluation/db/results.db"/><window><current_tab id="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="1290"/><expanded_item id="0" parent="-1"/><expanded_item id="1" parent="-1"/><expanded_item id="2" parent="-1"/><expanded_item id="3" parent="-1"/></tab_structure><tab_browse><current_table name="Config"/><default_encoding codec=""/><browsetable_info data="AAAAAgAAACQAUAByAG8AYgBsAGUAbQBJAG4AZgBvAHIAbQBhAHQAaQBvAG4AAAAAAAAAAAAAAAAAAAAAAAAAAAD/////AAAADABDAG8AbgBmAGkAZwAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8="/></tab_browse><tab_sql><sql name="instanceCount.sql">SELECT Instance FROM PvsData Group By Instance</sql><sql name="insertsProblemInformation.sql">Insert Into  ProblemInformation (Problem, Instance, MaxObjectiveSpd, MaxObjectiveTpd) VALUES (&quot;talent-scheduling&quot;, &quot;film103.dzn&quot;, 36, 198);
Insert Into  ProblemInformation (Problem, Instance, MaxObjectiveSpd, MaxObjectiveTpd) VALUES (&quot;talent-scheduling&quot;, &quot;film105.dzn&quot;, 36, 198);
Insert Into  ProblemInformation (Problem, Instance, MaxObjectiveSpd, MaxObjectiveTpd) VALUES (&quot;talent-scheduling&quot;, &quot;film114.dzn&quot;, 36, 198);
Insert Into  ProblemInformation (Problem, Instance, MaxObjectiveSpd, MaxObjectiveTpd) VALUES (&quot;talent-scheduling&quot;, &quot;film117.dzn&quot;, 36, 198);
Insert Into  ProblemInformation (Problem, Instance, MaxObjectiveSpd, MaxObjectiveTpd) VALUES (&quot;talent-scheduling&quot;, &quot;MobStory.dzn&quot;, 36, 198);
Insert Into  ProblemInformation (Problem, Instance, MaxObjectiveSpd, MaxObjectiveTpd) VALUES (&quot;talent-scheduling&quot;, &quot;concert.dzn&quot;, 22, 102);
Insert Into  ProblemInformation (Problem, Instance, MaxObjectiveSpd, MaxObjectiveTpd) VALUES (&quot;talent-scheduling&quot;, &quot;small.dzn&quot;, 15, 51);
Insert Into  ProblemInformation (Problem, Instance, MaxObjectiveSpd, MaxObjectiveTpd) VALUES (&quot;photo&quot;, &quot;photo1.dzn&quot;, 38, 268);
Insert Into  ProblemInformation (Problem, Instance, MaxObjectiveSpd, MaxObjectiveTpd) VALUES (&quot;photo&quot;, &quot;photo2.dzn&quot;, 53, 1167);
Insert Into  ProblemInformation (Problem, Instance, MaxObjectiveSpd, MaxObjectiveTpd) VALUES (&quot;photo&quot;, &quot;photo3.dzn&quot;, 55, 1169);
Insert Into  ProblemInformation (Problem, Instance, MaxObjectiveSpd, MaxObjectiveTpd) VALUES (&quot;soft-queens&quot;, &quot;soft-queens-8.dzn&quot;, 4, 5);
Insert Into  ProblemInformation (Problem, Instance, MaxObjectiveSpd, MaxObjectiveTpd) VALUES (&quot;soft-queens&quot;, &quot;soft-queens-16.dzn&quot;, 4, 5);
Insert Into  ProblemInformation (Problem, Instance, MaxObjectiveSpd, MaxObjectiveTpd) VALUES (&quot;soft-queens&quot;, &quot;soft-queens-30.dzn&quot;, 4, 5);
Insert Into  ProblemInformation (Problem, Instance, MaxObjectiveSpd, MaxObjectiveTpd) VALUES (&quot;mspsp&quot;, &quot;easy_01.dzn&quot;, 29, 166);
Insert Into  ProblemInformation (Problem, Instance, MaxObjectiveSpd, MaxObjectiveTpd) VALUES (&quot;mspsp&quot;, &quot;easy_04.dzn&quot;, 29, 166);
Insert Into  ProblemInformation (Problem, Instance, MaxObjectiveSpd, MaxObjectiveTpd) VALUES (&quot;mspsp&quot;, &quot;medium_01.dzn&quot;, 27, 166);
Insert Into  ProblemInformation (Problem, Instance, MaxObjectiveSpd, MaxObjectiveTpd) VALUES (&quot;mspsp&quot;, &quot;medium_02.dzn&quot;, 27, 166);
Insert Into  ProblemInformation (Problem, Instance, MaxObjectiveSpd, MaxObjectiveTpd) VALUES (&quot;mspsp&quot;, &quot;medium_04.dzn&quot;, 29, 166);
Insert Into  ProblemInformation (Problem, Instance, MaxObjectiveSpd, MaxObjectiveTpd) VALUES (&quot;mspsp&quot;, &quot;hard_02.dzn&quot;, 29, 166);
Insert Into  ProblemInformation (Problem, Instance, MaxObjectiveSpd, MaxObjectiveTpd) VALUES (&quot;mspsp&quot;, &quot;hard_03.dzn&quot;, 38, 177);
Insert Into  ProblemInformation (Problem, Instance, MaxObjectiveSpd, MaxObjectiveTpd) VALUES (&quot;mspsp&quot;, &quot;hard_04.dzn&quot;, 25, 141);
Insert Into  ProblemInformation (Problem, Instance, MaxObjectiveSpd, MaxObjectiveTpd) VALUES (&quot;on-call-rostering&quot;, &quot;4s-10d.dzn&quot;, 37, 70);
Insert Into  ProblemInformation (Problem, Instance, MaxObjectiveSpd, MaxObjectiveTpd) VALUES (&quot;on-call-rostering&quot;, &quot;4s-23d.dzn&quot;, 117, 442);
Insert Into  ProblemInformation (Problem, Instance, MaxObjectiveSpd, MaxObjectiveTpd) VALUES (&quot;on-call-rostering&quot;, &quot;5s-30d.dzn&quot;, 115, 500);
Insert Into  ProblemInformation (Problem, Instance, MaxObjectiveSpd, MaxObjectiveTpd) VALUES (&quot;on-call-rostering&quot;, &quot;6s-35d.dzn&quot;, 133, 584);
Insert Into  ProblemInformation (Problem, Instance, MaxObjectiveSpd, MaxObjectiveTpd) VALUES (&quot;on-call-rostering&quot;, &quot;8s-40d.dzn&quot;, 197, 762);
Insert Into  ProblemInformation (Problem, Instance, MaxObjectiveSpd, MaxObjectiveTpd) VALUES (&quot;on-call-rostering&quot;, &quot;10s-50d.dzn&quot;, 245, 954);
Insert Into  ProblemInformation (Problem, Instance, MaxObjectiveSpd, MaxObjectiveTpd) VALUES (&quot;on-call-rostering&quot;, &quot;10s-50d2.dzn&quot;, 191, 1135);
</sql><sql name="creates.sql">CREATE TABLE IF NOT EXISTS Config 
( ID INTEGER PRIMARY KEY,
  Timeout        INTEGER     NOT NULL,
  SearchType     INTEGER     NOT NULL,
  SPD            BOOLEAN     NOT NULL,   
  MIF            BOOLEAN     NOT NULL, 
  PropRed        BOOLEAN     NOT NULL,
  LnsProb        REAL ,
  LnsIter        INTEGER
);

CREATE TABLE IF NOT EXISTS Solver 
( ID INTEGER PRIMARY KEY,
  SolverName     VARCHAR(100)     NOT NULL
);


CREATE TABLE IF NOT EXISTS JobResult
   ( ID INTEGER PRIMARY KEY AUTOINCREMENT,
     Problem        VARCHAR(100)     NOT NULL,  
    Instance       VARCHAR(100)  NOT NULL,  
    SolverId       INTEGER NOT NULL,
    ConfigId       INTEGER NOT NULL,
    Solved         BOOLEAN  NOT NULL, 
    Optimally      BOOLEAN  NOT NULL, 
    Objective      INTEGER  NOT NULL, 
    NoSolutions    INTEGER  NOT NULL, 
    ElapsedSecs    REAL  NOT NULL,
    FOREIGN KEY(ConfigId) REFERENCES Config(ID),
    FOREIGN KEY(SolverId) REFERENCES Solver(ID)
) ;

CREATE TABLE IF NOT EXISTS ProblemInformation
   (
    Problem        VARCHAR(100)     NOT NULL,  
    Instance       VARCHAR(100)  NOT NULL,  
    MaxObjectiveSpd   INTEGER       NOT NULL,
    MaxObjectiveTpd   INTEGER       NOT NULL,
    PRIMARY KEY(Problem,Instance)
) ;
</sql><sql name="query-native-vs-strictbab-overhead-views.sql">DROP View IF exists PvsData; Drop View IF exists NativeData; Drop View IF exists PvsNativeSummary;

Create TEMPORARY View IF NOT EXISTS PvsData as 
SELECT problem, instance, SolverName, SolverId, round(elapsedSecs,2) as elapsedSecs, Objective, Optimally, cf.ID as ConfigId FROM 
JobResult jr INNER JOIN Config cf ON jr.ConfigId = cf.ID 
INNER JOIN Solver sv ON jr.SolverId = sv.ID 
where SPD = 1 and MIF = 1 and SearchType = 1 and Solved = 1
order by problem, instance, elapsedSecs, solverId ;

Create TEMPORARY View  IF NOT EXISTS NativeData as 
SELECT problem, instance, SolverName, SolverId, round(elapsedSecs,2) as elapsedSecs, Objective, Optimally, cf.ID as ConfigId FROM 
JobResult jr INNER JOIN Config cf ON jr.ConfigId = cf.ID 
INNER JOIN Solver sv ON jr.SolverId = sv.ID 
where SPD = 1 and MIF = 0 and SearchType = 3 
order by problem, instance, elapsedSecs, solverId ;

Create TEMPORARY View IF NOT EXISTS PvsNativeSummary as 
Select pd.Problem, pd.Instance, pd.SolverName, pd.elapsedSecs as &quot;SmythElapsed&quot;, pd.Objective as &quot;SmythObj&quot;, nd.elapsedSecs as &quot;WeightsElapsed&quot;, nd.Objective as &quot;WeightsObjective&quot; ,
       pd.elapsedSecs - nd.elapsedSecs as &quot;AbsOverhead&quot;, pd.elapsedSecs / nd.elapsedSecs as &quot;RelOverhead&quot;

from PvsData pd, NativeData nd
where pd.Problem = nd.Problem and 
      pd.Instance = nd.Instance and 
	  pd.SolverId = nd.SolverId
order by pd.problem, pd.instance, pd.solverName;

</sql><sql name="query-native-solver-comparison-pure-query.sql">Select Problem, SolverName, 
  AVG(SmythElapsed), AVG(WeightsElapsed),
  AVG(AbsOverhead), AVG(RelOverhead),
  AVG(WeightsObjective), AVG(SmythObj)
FROM PvsNativeSummary
GROUP By Problem,SolverName</sql><sql name="query-mif-comp-solver.sql">SELECT SolverName, 
--AVG(MifElapsed), AVG(NormalElapsed), 
AVG(diff), SUM(MifWins), COUNT(*), 1.0* SUM(MifWins) / COUNT(*) as &quot;RatioMifWins&quot; 
FROM 
MifSummary
GROUP BY SolverName 
</sql><sql name="query-mif-comp.sql">Drop View If Exists MifData; Drop View If Exists NoMifData; Drop View If Exists MifSummary ;

Create View If not Exists MiFData as 
SELECT problem, instance, SolverName, jr.SolverId, round(elapsedSecs,2) as elapsedSecs, Objective, Optimally, cf.ID as ConfigId, cf.SearchType FROM 
JobResult jr INNER JOIN Config cf ON jr.ConfigId = cf.ID 
INNER JOIN Solver sv ON jr.SolverId = sv.ID 
where SPD = 1 and MIF = 1 and timeout &gt; 10000 and PropRed = 0
order by problem, instance, elapsedSecs, solverId ;

Create View If not Exists NoMiFData as 
SELECT problem, instance, SolverName, jr.SolverId, round(elapsedSecs,2) as elapsedSecs, Objective, Optimally, cf.ID as ConfigId, cf.SearchType FROM 
JobResult jr INNER JOIN Config cf ON jr.ConfigId = cf.ID 
INNER JOIN Solver sv ON jr.SolverId = sv.ID 
where SPD = 1 and MIF = 0 and timeout &gt; 10000 and PropRed = 0
order by problem, instance, elapsedSecs, solverId ;

--Select Avg(Diff) From (
--Select md.elapsedSecs - nmd.elapsedSecs as diff 
--From MifData as md, NoMifData as nmd
--Where md.problem = nmd.problem and md.instance = nmd.instance and md.SolverName = nmd.SolverName 
--)

Create View If not Exists MifSummary as 
Select md.Problem, md.Instance, md.SolverName, md.elapsedSecs as &quot;MIFelapsed&quot;, nmd.elapsedSecs as &quot;NormalElapsed&quot;, 
md.elapsedSecs - nmd.elapsedSecs as diff,
md.elapsedSecs &lt; nmd.elapsedSecs as &quot;MifWins&quot; 
--SELECT * 
From MifData as md, NoMifData as nmd
Where md.problem = nmd.problem and md.instance = nmd.instance and md.SolverId = nmd.SolverId and md.SearchType = nmd.SearchType;

SELECT SolverName, 
--AVG(MifElapsed), AVG(NormalElapsed), 
AVG(diff) as &quot;Diff&quot;, SUM(MifWins), COUNT(*), 1.0* SUM(MifWins) / COUNT(*) as &quot;RatioMifWins&quot; 
FROM 
MifSummary
GROUP BY SolverName 

</sql><current_tab id="6"/></tab_sql></sqlb_project>
